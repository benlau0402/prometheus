name: CI (CO2 Task 2)
on:
  push:
    branches: [ main, master, edit-style ]
  pull_request:

permissions:
  contents: read

jobs:
  build_test_package:
    name: Build, Test, Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Go (built-in cache)
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Install reporters (JUnit)
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      # ---- BUILD (reproducible) ----
      - name: Build
        run: |
          go mod download
          CGO_ENABLED=0 go build -trimpath -ldflags "-s -w -buildid=" -o bin/prometheus ./cmd/prometheus

      # ---- TEST + COVERAGE ----
      - name: Test (JSON + coverage + JUnit)
        run: |
          mkdir -p reports
          go test ./... -count=1 -race -coverprofile=reports/coverage.out -json > reports/test.json || true
          cat reports/test.json | go-junit-report -parser gojson > reports/junit.xml || true
          go tool cover -func=reports/coverage.out || true
          go tool cover -html=reports/coverage.out -o reports/coverage.html || true

      # ---- PACKAGE ARTIFACT ----
      - name: Ensure prometheus.yml present
        run: |
          test -f prometheus.yml || (echo "prometheus.yml missing in repo root"; exit 1)

      - name: Package tarball
        run: |
          mkdir -p dist
          OS=$(go env GOOS); ARCH=$(go env GOARCH); VER=${GITHUB_SHA::7}
          tar -czf dist/prometheus_${VER}_${OS}_${ARCH}.tar.gz bin/prometheus prometheus.yml

      - name: Upload build/test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-test-artifacts
          path: |
            bin/**
            reports/**
            dist/**
            prometheus.yml

  docker_staging:
    name: Docker (upstream Dockerfile)
    runs-on: ubuntu-latest
    needs: build_test_package
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Go (for promu)
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Set up Node (for npm_licenses)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Ensure Docker build context includes required files
      - name: Patch .dockerignore for linux-amd64 artifacts
        run: |
          if [ -f .dockerignore ]; then
            # Remove any broad '.build/' ignore if present and replace with selective rules
            sed -i '/^\.build\/$/d' .dockerignore || true
            sed -i '/^\.build\/\*$/d' .dockerignore || true
          fi
          # Ensure we keep only linux-amd64 in context
          echo ".build/*" > .dockerignore.tmp
          echo "!.build/linux-amd64/**" >> .dockerignore.tmp
          echo "/.tarballs/" >> .dockerignore.tmp
          echo "/data/" >> .dockerignore.tmp
          # Merge existing (non-conflicting) lines
          (grep -vE '^\.(build|tarballs)/|^/data/|^\s*$' .dockerignore || true) >> .dockerignore.tmp
          mv .dockerignore.tmp .dockerignore
          echo "Final .dockerignore:"
          cat .dockerignore

      # 1) make promu
      - name: Install promu & run make promu
        run: |
          go install github.com/prometheus/promu@latest
          make promu

      # 2) promu crossbuild -p linux/amd64
      - name: Cross build artifacts (linux/amd64)
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          promu --version
          promu crossbuild -p linux/amd64
          ls -lah .build/linux-amd64 || true

      # 3) make npm_licenses
      - name: Generate npm licenses tarball
        run: |
          make npm_licenses
          test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

      # Sanity check the inputs the Dockerfile will COPY
      - name: Sanity check Dockerfile inputs
        run: |
          test -f .build/linux-amd64/prometheus || (echo "prometheus binary missing" && exit 1)
          test -f .build/linux-amd64/promtool   || (echo "promtool binary missing" && exit 1)
          test -f documentation/examples/prometheus.yml || (echo "example prometheus.yml missing" && exit 1)
          test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

      # 4) Build image using the existing Dockerfile (expects the files above)
      - name: Build Docker image (upstream Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          tags: local/prometheus:amd64

      # Save image as artifact (useful for grading)
      - name: Save image as artifact
        run: docker save local/prometheus:amd64 -o prometheus_ci_image.tar

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tar
          path: prometheus_ci_image.tar