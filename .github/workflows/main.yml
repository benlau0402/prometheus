name: CI (CO2 Task 2)
on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  build_test_package:
    name: Build, Test, Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Go (built-in cache)
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Install build dependencies (goyacc)
        run: go install golang.org/x/tools/cmd/goyacc@latest

      - name: Install reporters (JUnit)
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      # ---- BUILD (using make) ----
      - name: Build
        run: |
          # Use `make` to execute the standardized build process defined in the Makefile.
          make build
          # Debugging: Check for the file existence and list the contents
          echo "Checking for .build/linux-amd64/prometheus..."

      # # ---- TEST + COVERAGE (using make) ----
      # - name: Test (JSON + coverage + JUnit)
      #   run: |
      #     mkdir -p reports
      #     # Use `make` to execute the standardized test process.
      #     # This handles all dependencies like the parser and UI tests.
      #     make test || true
      #     # The `make test` command doesn't output the JUnit report directly,
      #     # so we still need to generate it from the go test JSON output.
      #     cat reports/test.json | go-junit-report -parser gojson > reports/junit.xml || true
      #     go tool cover -func=reports/coverage.out || true
      #     go tool cover -html=reports/coverage.out -o reports/coverage.html || true

      # # ---- Convert JUnit XML -> HTML (junit2html) ----
      # - name: Set up Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.x'

      # - name: Generate HTML test report
      #   if: always()
      #   run: |
      #     pip install junit2html
      #     if [ -s reports/junit.xml ]; then
      #       junit2html reports/junit.xml reports/test-report.html || echo "junit2html failed"
      #       ls -lh reports/
      #     else
      #       echo "No junit.xml found or file is empty; skipping HTML generation."
      #     fi

      # - name: Add report link to job summary
      #   if: always()
      #   run: |
      #     echo "### Test Reports" >> $GITHUB_STEP_SUMMARY
      #     echo "- JUnit XML: \`reports/junit.xml\`" >> $GITHUB_STEP_SUMMARY
      #     echo "- HTML: \`reports/test-report.html\` (download from the 'build-test-artifacts' artifact)" >> $GITHUB_STEP_SUMMARY
      #     if [ -f reports/coverage.html ]; then
      #       echo "- Coverage HTML: \`reports/coverage.html\`" >> $GITHUB_STEP_SUMMARY
      #     fi

      # # ---- PACKAGE ARTIFACT ----
      # - name: Ensure prometheus.yml present
      #   run: |
      #     test -f prometheus.yml || (echo "prometheus.yml missing in repo root"; exit 1)

      - name: Package tarball
        run: |
          mkdir -p dist
          OS=$(go env GOOS); ARCH=$(go env GOARCH); VER=${GITHUB_SHA::7}
          # The 'promu' tool puts the binary in .build/linux-amd64/prometheus.
          # We must use that path here.
          tar -czf dist/prometheus_${VER}_${OS}_${ARCH}.tar.gz /home/runner/work/prometheus/prometheus/.build/linux-amd64/prometheus  prometheus.yml

      - name: Upload build/test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-test-artifacts
          path: |
            .build/**
            reports/**
            dist/**
            prometheus.yml

  docker_staging:
    name: Docker (upstream Dockerfile)
    runs-on: ubuntu-latest
    needs: build_test_package
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Go (for promu)
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Ensure GOPATH/bin on PATH (defensive)
        run: echo "$HOME/go/bin" >> "$GITHUB_PATH"

      - name: Set up Node (for npm_licenses)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Keep linux-amd64 artifacts in Docker context
      - name: Patch .dockerignore for linux-amd64 artifacts
        run: |
          if [ -f .dockerignore ]; then
            sed -i '/^\.build\/$/d' .dockerignore || true
            sed -i '/^\.build\/\*$/d' .dockerignore || true
          fi
          {
            echo ".build/*"
            echo "!.build/linux-amd64/**"
            echo "/.tarballs/"
            echo "/data/"
          } > .dockerignore.tmp
          (grep -vE '^\.(build|tarballs)/|^/data/|^\s*$' .dockerignore || true) >> .dockerignore.tmp
          mv .dockerignore.tmp .dockerignore
          echo "Final .dockerignore:"; cat .dockerignore

      # 1) make promu
      - name: Install promu & run make promu
        run: |
          go install github.com/prometheus/promu@latest
          promu version || promu help | head -n1
          make promu

      # 2) promu crossbuild -p linux/amd64
      - name: Cross build artifacts (linux/amd64)
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          promu version || true
          promu crossbuild -p linux/amd64
          ls -lah .build/linux-amd64 || true

      # 3) make npm_licenses
      - name: Generate npm licenses tarball
        run: |
          make npm_licenses
          test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

      # Sanity check the inputs the Dockerfile will COPY
      - name: Sanity check Dockerfile inputs
        run: |
          test -f .build/linux-amd64/prometheus || (echo "prometheus binary missing" && exit 1)
          test -f .build/linux-amd64/promtool   || (echo "promtool binary missing" && exit 1)
          test -f documentation/examples/prometheus.yml || (echo "example prometheus.yml missing" && exit 1)
          test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

      # 4) Build image using the existing Dockerfile
      - name: Build Docker image (upstream Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          tags: local/prometheus:amd64

      - name: Save image as artifact
        run: docker save local/prometheus:amd64 -o prometheus_ci_image.tar

      - name: Upload Docker artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tar
          path: prometheus_ci_image.tar
