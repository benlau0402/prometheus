name: CI (CO2 Task 2)
on:
  push:
    branches: [ main, master, edit-style ]
  pull_request:

permissions:
  contents: read

jobs:
  # 1) Build artifacts FIRST (for both tests and docker)
  build_artifacts:
    name: Build artifacts (promu crossbuild + npm_licenses + package)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Go (cache on)
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Ensure GOPATH/bin on PATH
        run: echo "$HOME/go/bin" >> "$GITHUB_PATH"

      - name: Set up Node (for npm_licenses)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Make sure .dockerignore allows linux-amd64 artifacts in context
      - name: Normalize .dockerignore (keep linux-amd64)
        run: |
          cat > .dockerignore <<'EOF'
          data/
          .tarballs/
          .build/*
          !.build/linux-amd64/**
          EOF
          echo "Final .dockerignore:"; cat .dockerignore

      # Build a local binary too (handy for packaging)
      - name: Build local binary (reproducible)
        run: |
          go mod download
          CGO_ENABLED=0 go build -trimpath -ldflags "-s -w -buildid=" -o bin/prometheus ./cmd/prometheus

      # Upstream release-flow inputs
      - name: Install promu & bootstrap
        run: |
          go install github.com/prometheus/promu@latest
          promu version || true
          make promu

      - name: promu crossbuild (linux/amd64)
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          promu crossbuild -p linux/amd64
          ls -lah .build/linux-amd64

      - name: Generate npm licenses
        run: |
          make npm_licenses
          test -f npm_licenses.tar.bz2

      # Ensure we have a config to package (root or copy example)
      - name: Ensure prometheus.yml present
        run: |
          if [ -f prometheus.yml ]; then
            echo "Using ./prometheus.yml"
          elif [ -f documentation/examples/prometheus.yml ]; then
            cp documentation/examples/prometheus.yml prometheus.yml
            echo "Copied example to ./prometheus.yml"
          else
            echo "No prometheus.yml found"; exit 1
          fi

      - name: Package tarball (deliverable)
        run: |
          mkdir -p dist
          OS=$(go env GOOS); ARCH=$(go env GOARCH); VER=${GITHUB_SHA::7}
          tar -czf dist/prometheus_${VER}_${OS}_${ARCH}.tar.gz bin/prometheus prometheus.yml

      - name: Upload build artifacts (for downstream jobs)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .build/linux-amd64/**
            npm_licenses.tar.bz2
            documentation/examples/prometheus.yml
            bin/prometheus
            prometheus.yml
            dist/**

  docker_staging:
    name: Docker (upstream Dockerfile)
    runs-on: ubuntu-latest
    needs: build_artifacts
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Set up Go (for promu)
      uses: actions/setup-go@v5
      with:
        go-version: "1.22.x"
        cache: true

    - name: Ensure GOPATH/bin on PATH (defensive)
      run: echo "$HOME/go/bin" >> "$GITHUB_PATH"

    - name: Set up Node (for npm_licenses)
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    # Keep linux-amd64 artifacts in Docker context
    - name: Patch .dockerignore for linux-amd64 artifacts
      run: |
        if [ -f .dockerignore ]; then
          sed -i '/^\.build\/$/d' .dockerignore || true
          sed -i '/^\.build\/\*$/d' .dockerignore || true
        fi
        {
          echo ".build/*"
          echo "!.build/linux-amd64/**"
          echo "/.tarballs/"
          echo "/data/"
        } > .dockerignore.tmp
        (grep -vE '^\.(build|tarballs)/|^/data/|^\s*$' .dockerignore || true) >> .dockerignore.tmp
        mv .dockerignore.tmp .dockerignore
        echo "Final .dockerignore:"; cat .dockerignore

    # 1) make promu
    - name: Install promu & run make promu
      run: |
        go install github.com/prometheus/promu@latest
        promu version || promu help | head -n1
        make promu

    # 2) promu crossbuild -p linux/amd64
    - name: Cross build artifacts (linux/amd64)
      env:
        GOOS: linux
        GOARCH: amd64
      run: |
        promu version || true
        promu crossbuild -p linux/amd64
        ls -lah .build/linux-amd64 || true

    # 3) make npm_licenses
    - name: Generate npm licenses tarball
      run: |
        make npm_licenses
        test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

    # Sanity check the inputs the Dockerfile will COPY
    - name: Sanity check Dockerfile inputs
      run: |
        test -f .build/linux-amd64/prometheus || (echo "prometheus binary missing" && exit 1)
        test -f .build/linux-amd64/promtool   || (echo "promtool binary missing" && exit 1)
        test -f documentation/examples/prometheus.yml || (echo "example prometheus.yml missing" && exit 1)
        test -f npm_licenses.tar.bz2 || (echo "npm_licenses.tar.bz2 missing" && exit 1)

    # 4) Build image using the existing Dockerfile
    - name: Build Docker image (upstream Dockerfile)
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: false
        tags: local/prometheus:amd64

    - name: Save image as artifact
      run: docker save local/prometheus:amd64 -o prometheus_ci_image.tar

    - name: Upload Docker artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-tar
        path: prometheus_ci_image.tar